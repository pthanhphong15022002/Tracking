import { filter } from 'rxjs';
import {
  ChangeDetectorRef,
  Component,
  Injector,
  Input,
  TemplateRef,
  ViewChild,
} from '@angular/core';
import { SelectionSettingsModel } from '@syncfusion/ej2-angular-grids';
import {
  CallFuncService,
  CodxFormDynamicComponent,
  CodxGridviewV2Component,
  CRUDService,
  DataRequest,
  FormModel,
  NotificationsService,
  SidebarModel,
  UIComponent,
} from 'codx-core';
import { CodxHrService } from 'projects/codx-hr/src/public-api';
import moment from 'moment';
import { FormGroup } from '@angular/forms';

@Component({
  selector: 'hsnv-track-changes',
  templateUrl: './hsnv-track-changes.component.html',
  styleUrls: ['./hsnv-track-changes.component.scss'],
})
export class HsnvTrackChangesComponent extends UIComponent {
  @Input() employeeID: any;
  @Input() funID: any;
  @ViewChild('eTrackChangesGridViewID')
  eTrackChangesGridViewID: CodxGridviewV2Component;

  // Tai nạn lao động
  eTrackChangesFormModel: FormModel;

  constructor(
    private inject: Injector,
    private hrService: CodxHrService,
    private notifiSV: NotificationsService,
    private df: ChangeDetectorRef,
    private callfunc: CallFuncService
  ) {
    super(inject);
  }

  override onInit(): void {
    this.initETrackChanges();
    this.api.execSv(
      'HR',
      'HR',
      'SysTrackingValueBusiness',
      'LoadDataTreeViewForFilter'
    ).subscribe((res) => {
      this.group = res;
      this.filteredGroup = res;
      this.lstChild = {};
      this.filteredLstChild = {};  
    
      for (const item of this.group) {  
        this.api.execSv(
          'HR',
          'HR',
          'SysTrackingValueBusiness',
          'LoadDataChildForFilter',
          [item.groupCode]
        ).subscribe((childRes) => {
          this.lstChild[item.groupCode] = childRes as any[];
          this.filteredLstChild[item.groupCode] = childRes as any[];
        });
      }
    });
  }

  isCheckAll: boolean = false;
  isCheck: boolean = false;
  eTrackChangesGroupFormModel: FormGroup;
  itemSelected: any;
  group: any;
  filteredGroup: any; 
  filteredLstChild: { [key: string]: any[] }; 

  lstChild: { [key: string]: any[] } = {};  
  expandedGroups: { [key: string]: boolean } = {}; 
  fromDate: any;
  toDate: any;
  lstField: any;
  lstStringField: string;

  initETrackChanges() {
    this.hrService.getFormModel(this.funID).then((res) => {
      this.eTrackChangesFormModel = res;
      this.hrService
        .getFormGroup(
          this.eTrackChangesFormModel.formName,
          this.eTrackChangesFormModel.gridViewName,
          this.eTrackChangesFormModel
        )
        .then((fg) => {
          this.eTrackChangesGroupFormModel = fg;
          this.eTrackChangesGroupFormModel.patchValue(this.itemSelected);
          this.eTrackChangesFormModel.currentData = this.itemSelected;
        });
    });
  }

  valueChange(event, value) {
    if (!this.lstField) {  
      this.lstField = [];  
    }
  
    if (event.data === true) {
      if (!this.lstField.includes(value.fieldName)) {
        this.lstField.push(value.fieldName);
        console.log('+1', this.lstField);
      }
    } else {
      const index = this.lstField.indexOf(value.fieldName);
      if (index > -1) {
        this.lstField.splice(index, 1);
        console.log('-1', this.lstField);
      }
    }
  }
  
  valueChange1(event) {
    console.log('e', event);
    switch (event.field) {
      case 'FromDate':
        this.fromDate = moment(new Date(event.data.fromDate)).format("DD/MM/YYYY")
        break;
      case 'ToDate':
        this.toDate = moment(new Date(event.data.toDate)).format("DD/MM/YYYY")
        break;
      case 'CheckAll':
        this.isCheck = !this.isCheck;
        break;
      case 'BHLD':
        if (event.data === true) {  
          this.lstChild[event.field].forEach((child) => {
            child.isChecked = true;  
          });
        } else {
          this.lstChild[event.field].forEach((child) => {
            child.isChecked = false;
          });
        }
        break;
    }
  }

  searchValue(query: string) {
    if (!query) {
      // Nếu không có từ khóa, hiển thị tất cả
      this.filteredGroup = [...this.group];
      this.filteredLstChild = { ...this.lstChild };
      return;
    }

    // Lọc các group và child dựa trên từ khóa
    this.filteredGroup = this.group.filter(group =>
      this.lstChild[group.groupCode].some(child =>
        child.caption.toLowerCase().includes(query.toLowerCase())
      )
    );

    this.filteredLstChild = {};
    this.filteredGroup.forEach(group => {
      this.expandedGroups[group.groupCode] = true;
      this.filteredLstChild[group.groupCode] = this.lstChild[group.groupCode].filter(child =>
        child.caption.toLowerCase().includes(query.toLowerCase())
      );
    });
  }

  readData() {
    if (!this.lstField) {
      this.lstStringField = null;
    } else {
      this.lstStringField = this.lstField.join(',');
    }
    
    if (this.eTrackChangesGridViewID.dataService.service === 'SYS') {
      this.eTrackChangesGridViewID.dataService.service = 'HR';
    }
    this.eTrackChangesGridViewID.dataValues = `${this.fromDate};${this.toDate};${this.employeeID};${this.lstStringField}`;
    this.eTrackChangesGridViewID.refresh();
  }

  onClickItem(event) {
    this.itemSelected = event;
    this.handleEditInfo('Chỉnh sửa', this.eTrackChangesFormModel);
  }

  handleEditInfo(actionHeaderText: string, formModel: FormModel) {
    let tempData = JSON.parse(JSON.stringify(this.itemSelected));
    var dataService = new CRUDService(this.inject);
    let request = new DataRequest(
      formModel?.formName,
      formModel?.gridViewName,
      formModel?.entityName
    );
    request.funcID = formModel?.funcID;
    dataService.service = 'HR';
    dataService.request = request;
    dataService.edit(tempData).subscribe((res) => {
      let option = new SidebarModel();
      option.FormModel = formModel;
      option.Width = '550px';
      let dialogAdd = this.callfunc.openSide(
        CodxFormDynamicComponent,
        {
          formModel: option.FormModel,
          data: res,
          function: null,
          dataService: dataService,
          isView: false,
          titleMore: actionHeaderText,
        },
        option
      );
      dialogAdd.closed.subscribe((res) => {
        dataService.clear();
        if (res?.event) {
          this.itemSelected = res.event.update.data;
        }
        this.eTrackChangesGridViewID.refresh();
        this.df.detectChanges();
      });
    });
  }

  expand(groupCode: string) {
    this.expandedGroups[groupCode] = !this.expandedGroups[groupCode];
  }
}
